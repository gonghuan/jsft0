<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cn.link.mapper.BankMapper">
  <resultMap id="BaseResultMap" type="com.cn.link.model.Bank">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="bank" jdbcType="CHAR" property="bank" />
  </resultMap>
  <resultMap id="RemainResultMap" type="com.cn.link.model.BankRemain">
  	<id column="id" property="id"></id>
  	<result column="bank" property="bank"></result>
  	<result column="bankbranch" property="branch"></result>
  	<result column="account" property="account"></result>
  	<result column="currency" property="currency"></result>
  	<result column="remain" property="remain"></result>
  	<result column="date" property="date"></result>
  </resultMap>
  <resultMap id="BankBranchMap" type="com.cn.link.model.BankBranch">
  	<result column="bank" property="bank"></result>
  	<result column="bankName" property="bankName"></result>
  	<result column="currency" property="currency"></result>
  	<result column="account" property="account"></result>
  </resultMap>
  <sql id="Base_Column_List">
    id, bank
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bank
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bank
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.cn.link.model.Bank">
    insert into bank (id, bank)
    values (#{id,jdbcType=INTEGER}, #{bank,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.cn.link.model.Bank">
    insert into bank
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="bank != null">
        bank,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="bank != null">
        #{bank,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.cn.link.model.Bank">
    update bank
    <set>
      <if test="bank != null">
        bank = #{bank,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.cn.link.model.Bank">
    update bank
    set bank = #{bank,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="queryBank" resultType="java.lang.String">
    select DISTINCT bank
    from bank
  </select>
  
  <select id="queryBankBranch" resultType="java.lang.String" parameterType="java.lang.String">
  	select distinct bankName from bankbranch where bankName like concat('%', #{bank}, '%')
  </select>
  
  <select id='queryBankBranches' resultType='java.lang.String'>
  	select distinct bankName from bankbranch
  </select>
  
  <select id='queryBankAccount' resultType='java.lang.String'>
  	select account from bankbranch where bankName = #{bankBranch}
  </select>
  
  <insert id='insertBankRemain' parameterType='com.cn.link.model.BankRemain'>
  	insert into bankremain(bank, bankbranch, account, currency, remain, date) values(#{bank}, #{branch},
  	#{account}, #{currency}, #{remain}, #{date});
  </insert>
  
  <insert id='insertBankRemainList' >
  	insert into bankremain(bank, bankbranch, account, currency, remain, date) values
  	<foreach collection = 'list' item = 'bankremain' separator=','>
  		(#{bankremain.bank}, #{bankremain.branch}, #{bankremain.account}, #{bankremain.currency}, #{bankremain.remain},
  		#{bankremain.date})
  	</foreach>
  </insert>
  
  <select id='queryTodayBankRemain' resultMap='RemainResultMap'>
  	select * from bankremain where date = #{today}
  </select>
  
  <select id='queryBankRemainCurrency' resultMap='RemainResultMap'>
  	select * from bankremain where currency = #{currency}
  </select>
  
  <select id='queryBankRemainForeignCurrency' resultMap='RemainResultMap'>
  	select * from bankremain where currency != #{currency}
  </select>
  
  <select id='queryBankbranch' resultMap="BankBranchMap">
  	select * from bankbranch;
  </select>
  
  <insert id="insertBankBranch">
  	insert into bankbranch(bank, bankName, account, currency) values(#{bank}, #{bankName}, #{account}, #{currency})
  </insert>
  
  <delete id='delBankBranch'>
  	delete from bankbranch where account in(
  		<foreach collection='array' item='account' separator=','>
  			#{account}
  		</foreach>
  	)
  </delete>
</mapper>